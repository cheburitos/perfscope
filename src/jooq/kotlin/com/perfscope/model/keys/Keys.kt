/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.keys


import com.perfscope.model.tables.BranchTypes
import com.perfscope.model.tables.CallPaths
import com.perfscope.model.tables.Calls
import com.perfscope.model.tables.Cbr
import com.perfscope.model.tables.CommThreads
import com.perfscope.model.tables.Comms
import com.perfscope.model.tables.ContextSwitches
import com.perfscope.model.tables.Dsos
import com.perfscope.model.tables.Machines
import com.perfscope.model.tables.Samples
import com.perfscope.model.tables.SelectedEvents
import com.perfscope.model.tables.Symbols
import com.perfscope.model.tables.Threads
import com.perfscope.model.tables.records.BranchTypesRecord
import com.perfscope.model.tables.records.CallPathsRecord
import com.perfscope.model.tables.records.CallsRecord
import com.perfscope.model.tables.records.CbrRecord
import com.perfscope.model.tables.records.CommThreadsRecord
import com.perfscope.model.tables.records.CommsRecord
import com.perfscope.model.tables.records.ContextSwitchesRecord
import com.perfscope.model.tables.records.DsosRecord
import com.perfscope.model.tables.records.MachinesRecord
import com.perfscope.model.tables.records.SamplesRecord
import com.perfscope.model.tables.records.SelectedEventsRecord
import com.perfscope.model.tables.records.SymbolsRecord
import com.perfscope.model.tables.records.ThreadsRecord

import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val BRANCH_TYPES__PK_BRANCH_TYPES: UniqueKey<BranchTypesRecord> = Internal.createUniqueKey(BranchTypes.BRANCH_TYPES, DSL.name("pk_branch_types"), arrayOf(BranchTypes.BRANCH_TYPES.ID), true)
val CALL_PATHS__PK_CALL_PATHS: UniqueKey<CallPathsRecord> = Internal.createUniqueKey(CallPaths.CALL_PATHS, DSL.name("pk_call_paths"), arrayOf(CallPaths.CALL_PATHS.ID), true)
val CALLS__PK_CALLS: UniqueKey<CallsRecord> = Internal.createUniqueKey(Calls.CALLS, DSL.name("pk_calls"), arrayOf(Calls.CALLS.ID), true)
val CBR__PK_CBR: UniqueKey<CbrRecord> = Internal.createUniqueKey(Cbr.CBR, DSL.name("pk_cbr"), arrayOf(Cbr.CBR.ID), true)
val COMM_THREADS__PK_COMM_THREADS: UniqueKey<CommThreadsRecord> = Internal.createUniqueKey(CommThreads.COMM_THREADS, DSL.name("pk_comm_threads"), arrayOf(CommThreads.COMM_THREADS.ID), true)
val COMMS__PK_COMMS: UniqueKey<CommsRecord> = Internal.createUniqueKey(Comms.COMMS, DSL.name("pk_comms"), arrayOf(Comms.COMMS.ID), true)
val CONTEXT_SWITCHES__PK_CONTEXT_SWITCHES: UniqueKey<ContextSwitchesRecord> = Internal.createUniqueKey(ContextSwitches.CONTEXT_SWITCHES, DSL.name("pk_context_switches"), arrayOf(ContextSwitches.CONTEXT_SWITCHES.ID), true)
val DSOS__PK_DSOS: UniqueKey<DsosRecord> = Internal.createUniqueKey(Dsos.DSOS, DSL.name("pk_dsos"), arrayOf(Dsos.DSOS.ID), true)
val MACHINES__PK_MACHINES: UniqueKey<MachinesRecord> = Internal.createUniqueKey(Machines.MACHINES, DSL.name("pk_machines"), arrayOf(Machines.MACHINES.ID), true)
val SAMPLES__PK_SAMPLES: UniqueKey<SamplesRecord> = Internal.createUniqueKey(Samples.SAMPLES, DSL.name("pk_samples"), arrayOf(Samples.SAMPLES.ID), true)
val SELECTED_EVENTS__PK_SELECTED_EVENTS: UniqueKey<SelectedEventsRecord> = Internal.createUniqueKey(SelectedEvents.SELECTED_EVENTS, DSL.name("pk_selected_events"), arrayOf(SelectedEvents.SELECTED_EVENTS.ID), true)
val SYMBOLS__PK_SYMBOLS: UniqueKey<SymbolsRecord> = Internal.createUniqueKey(Symbols.SYMBOLS, DSL.name("pk_symbols"), arrayOf(Symbols.SYMBOLS.ID), true)
val THREADS__PK_THREADS: UniqueKey<ThreadsRecord> = Internal.createUniqueKey(Threads.THREADS, DSL.name("pk_threads"), arrayOf(Threads.THREADS.ID), true)

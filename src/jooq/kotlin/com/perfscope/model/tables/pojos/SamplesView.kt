/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables.pojos


import java.io.Serializable


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
data class SamplesView(
    val id: Int? = null,
    val time: Long? = null,
    val cpu: Int? = null,
    val pid: Int? = null,
    val tid: Int? = null,
    val command: String? = null,
    val event: String? = null,
    val ipHex: Any? = null,
    val symbol: String? = null,
    val symOffset: Long? = null,
    val dsoShortName: String? = null,
    val toIpHex: Any? = null,
    val toSymbol: String? = null,
    val toSymOffset: Long? = null,
    val toDsoShortName: String? = null,
    val branchTypeName: String? = null,
    val inTx: Boolean? = null,
    val insnCount: Long? = null,
    val cycCount: Long? = null,
    val ipc: Any? = null,
    val flags: Int? = null
): Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: SamplesView = other as SamplesView
        if (this.id == null) {
            if (o.id != null)
                return false
        }
        else if (this.id != o.id)
            return false
        if (this.time == null) {
            if (o.time != null)
                return false
        }
        else if (this.time != o.time)
            return false
        if (this.cpu == null) {
            if (o.cpu != null)
                return false
        }
        else if (this.cpu != o.cpu)
            return false
        if (this.pid == null) {
            if (o.pid != null)
                return false
        }
        else if (this.pid != o.pid)
            return false
        if (this.tid == null) {
            if (o.tid != null)
                return false
        }
        else if (this.tid != o.tid)
            return false
        if (this.command == null) {
            if (o.command != null)
                return false
        }
        else if (this.command != o.command)
            return false
        if (this.event == null) {
            if (o.event != null)
                return false
        }
        else if (this.event != o.event)
            return false
        if (this.ipHex == null) {
            if (o.ipHex != null)
                return false
        }
        else if (this.ipHex != o.ipHex)
            return false
        if (this.symbol == null) {
            if (o.symbol != null)
                return false
        }
        else if (this.symbol != o.symbol)
            return false
        if (this.symOffset == null) {
            if (o.symOffset != null)
                return false
        }
        else if (this.symOffset != o.symOffset)
            return false
        if (this.dsoShortName == null) {
            if (o.dsoShortName != null)
                return false
        }
        else if (this.dsoShortName != o.dsoShortName)
            return false
        if (this.toIpHex == null) {
            if (o.toIpHex != null)
                return false
        }
        else if (this.toIpHex != o.toIpHex)
            return false
        if (this.toSymbol == null) {
            if (o.toSymbol != null)
                return false
        }
        else if (this.toSymbol != o.toSymbol)
            return false
        if (this.toSymOffset == null) {
            if (o.toSymOffset != null)
                return false
        }
        else if (this.toSymOffset != o.toSymOffset)
            return false
        if (this.toDsoShortName == null) {
            if (o.toDsoShortName != null)
                return false
        }
        else if (this.toDsoShortName != o.toDsoShortName)
            return false
        if (this.branchTypeName == null) {
            if (o.branchTypeName != null)
                return false
        }
        else if (this.branchTypeName != o.branchTypeName)
            return false
        if (this.inTx == null) {
            if (o.inTx != null)
                return false
        }
        else if (this.inTx != o.inTx)
            return false
        if (this.insnCount == null) {
            if (o.insnCount != null)
                return false
        }
        else if (this.insnCount != o.insnCount)
            return false
        if (this.cycCount == null) {
            if (o.cycCount != null)
                return false
        }
        else if (this.cycCount != o.cycCount)
            return false
        if (this.ipc == null) {
            if (o.ipc != null)
                return false
        }
        else if (this.ipc != o.ipc)
            return false
        if (this.flags == null) {
            if (o.flags != null)
                return false
        }
        else if (this.flags != o.flags)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.id == null) 0 else this.id.hashCode())
        result = prime * result + (if (this.time == null) 0 else this.time.hashCode())
        result = prime * result + (if (this.cpu == null) 0 else this.cpu.hashCode())
        result = prime * result + (if (this.pid == null) 0 else this.pid.hashCode())
        result = prime * result + (if (this.tid == null) 0 else this.tid.hashCode())
        result = prime * result + (if (this.command == null) 0 else this.command.hashCode())
        result = prime * result + (if (this.event == null) 0 else this.event.hashCode())
        result = prime * result + (if (this.ipHex == null) 0 else this.ipHex.hashCode())
        result = prime * result + (if (this.symbol == null) 0 else this.symbol.hashCode())
        result = prime * result + (if (this.symOffset == null) 0 else this.symOffset.hashCode())
        result = prime * result + (if (this.dsoShortName == null) 0 else this.dsoShortName.hashCode())
        result = prime * result + (if (this.toIpHex == null) 0 else this.toIpHex.hashCode())
        result = prime * result + (if (this.toSymbol == null) 0 else this.toSymbol.hashCode())
        result = prime * result + (if (this.toSymOffset == null) 0 else this.toSymOffset.hashCode())
        result = prime * result + (if (this.toDsoShortName == null) 0 else this.toDsoShortName.hashCode())
        result = prime * result + (if (this.branchTypeName == null) 0 else this.branchTypeName.hashCode())
        result = prime * result + (if (this.inTx == null) 0 else this.inTx.hashCode())
        result = prime * result + (if (this.insnCount == null) 0 else this.insnCount.hashCode())
        result = prime * result + (if (this.cycCount == null) 0 else this.cycCount.hashCode())
        result = prime * result + (if (this.ipc == null) 0 else this.ipc.hashCode())
        result = prime * result + (if (this.flags == null) 0 else this.flags.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("SamplesView (")

        sb.append(id)
        sb.append(", ").append(time)
        sb.append(", ").append(cpu)
        sb.append(", ").append(pid)
        sb.append(", ").append(tid)
        sb.append(", ").append(command)
        sb.append(", ").append(event)
        sb.append(", ").append(ipHex)
        sb.append(", ").append(symbol)
        sb.append(", ").append(symOffset)
        sb.append(", ").append(dsoShortName)
        sb.append(", ").append(toIpHex)
        sb.append(", ").append(toSymbol)
        sb.append(", ").append(toSymOffset)
        sb.append(", ").append(toDsoShortName)
        sb.append(", ").append(branchTypeName)
        sb.append(", ").append(inTx)
        sb.append(", ").append(insnCount)
        sb.append(", ").append(cycCount)
        sb.append(", ").append(ipc)
        sb.append(", ").append(flags)

        sb.append(")")
        return sb.toString()
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables


import com.perfscope.model.DefaultSchema
import com.perfscope.model.tables.records.CallsViewRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CallsView(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, CallsViewRecord>?,
    parentPath: InverseForeignKey<out Record, CallsViewRecord>?,
    aliased: Table<CallsViewRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<CallsViewRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    CREATE VIEW calls_view AS SELECT calls.id,thread_id,(SELECT pid FROM threads WHERE id = thread_id) AS pid,(SELECT tid FROM threads WHERE id = thread_id) AS tid,(SELECT comm FROM comms WHERE id = comm_id) AS command,call_path_id,printf("%x", ip) AS ip,symbol_id,(SELECT name FROM symbols WHERE id = symbol_id) AS symbol,call_time,return_time,return_time - call_time AS elapsed_time,branch_count,insn_count,cyc_count,CASE WHEN cyc_count=0 THEN CAST(0 AS FLOAT) ELSE ROUND(CAST(insn_count AS FLOAT) / cyc_count, 2) END AS IPC,call_id,return_id,CASE WHEN flags=0 THEN '' WHEN flags=1 THEN 'no call' WHEN flags=2 THEN 'no return' WHEN flags=3 THEN 'no call/return' WHEN flags=6 THEN 'jump' ELSE flags END AS flags,parent_call_path_id,calls.parent_id FROM calls INNER JOIN call_paths ON call_paths.id = call_path_id
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>calls_view</code>
         */
        val CALLS_VIEW: CallsView = CallsView()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CallsViewRecord> = CallsViewRecord::class.java

    /**
     * The column <code>calls_view.id</code>.
     */
    val ID: TableField<CallsViewRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>calls_view.thread_id</code>.
     */
    val THREAD_ID: TableField<CallsViewRecord, Long?> = createField(DSL.name("thread_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>calls_view.pid</code>.
     */
    val PID: TableField<CallsViewRecord, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>calls_view.tid</code>.
     */
    val TID: TableField<CallsViewRecord, Int?> = createField(DSL.name("tid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>calls_view.command</code>.
     */
    val COMMAND: TableField<CallsViewRecord, String?> = createField(DSL.name("command"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>calls_view.call_path_id</code>.
     */
    val CALL_PATH_ID: TableField<CallsViewRecord, Long?> = createField(DSL.name("call_path_id"), SQLDataType.BIGINT, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val IP: TableField<CallsViewRecord, Any?> = createField(DSL.name("ip"), org.jooq.impl.SQLDataType.OTHER, this, "")

    /**
     * The column <code>calls_view.symbol_id</code>.
     */
    val SYMBOL_ID: TableField<CallsViewRecord, Long?> = createField(DSL.name("symbol_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>calls_view.symbol</code>.
     */
    val SYMBOL: TableField<CallsViewRecord, String?> = createField(DSL.name("symbol"), SQLDataType.VARCHAR(2048), this, "")

    /**
     * The column <code>calls_view.call_time</code>.
     */
    val CALL_TIME: TableField<CallsViewRecord, Long?> = createField(DSL.name("call_time"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>calls_view.return_time</code>.
     */
    val RETURN_TIME: TableField<CallsViewRecord, Long?> = createField(DSL.name("return_time"), SQLDataType.BIGINT, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val ELAPSED_TIME: TableField<CallsViewRecord, Any?> = createField(DSL.name("elapsed_time"), org.jooq.impl.SQLDataType.OTHER, this, "")

    /**
     * The column <code>calls_view.branch_count</code>.
     */
    val BRANCH_COUNT: TableField<CallsViewRecord, Long?> = createField(DSL.name("branch_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>calls_view.insn_count</code>.
     */
    val INSN_COUNT: TableField<CallsViewRecord, Long?> = createField(DSL.name("insn_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>calls_view.cyc_count</code>.
     */
    val CYC_COUNT: TableField<CallsViewRecord, Long?> = createField(DSL.name("cyc_count"), SQLDataType.BIGINT, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val IPC: TableField<CallsViewRecord, Any?> = createField(DSL.name("IPC"), org.jooq.impl.SQLDataType.OTHER, this, "")

    /**
     * The column <code>calls_view.call_id</code>.
     */
    val CALL_ID: TableField<CallsViewRecord, Long?> = createField(DSL.name("call_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>calls_view.return_id</code>.
     */
    val RETURN_ID: TableField<CallsViewRecord, Long?> = createField(DSL.name("return_id"), SQLDataType.BIGINT, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val FLAGS: TableField<CallsViewRecord, Any?> = createField(DSL.name("flags"), org.jooq.impl.SQLDataType.OTHER, this, "")

    /**
     * The column <code>calls_view.parent_call_path_id</code>.
     */
    val PARENT_CALL_PATH_ID: TableField<CallsViewRecord, Long?> = createField(DSL.name("parent_call_path_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>calls_view.parent_id</code>.
     */
    val PARENT_ID: TableField<CallsViewRecord, Long?> = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<CallsViewRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<CallsViewRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<CallsViewRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>calls_view</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>calls_view</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>calls_view</code> table reference
     */
    constructor(): this(DSL.name("calls_view"), null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun `as`(alias: String): CallsView = CallsView(DSL.name(alias), this)
    override fun `as`(alias: Name): CallsView = CallsView(alias, this)
    override fun `as`(alias: Table<*>): CallsView = CallsView(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CallsView = CallsView(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CallsView = CallsView(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): CallsView = CallsView(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): CallsView = CallsView(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): CallsView = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): CallsView = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): CallsView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): CallsView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): CallsView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): CallsView = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): CallsView = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): CallsView = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): CallsView = where(DSL.notExists(select))
}

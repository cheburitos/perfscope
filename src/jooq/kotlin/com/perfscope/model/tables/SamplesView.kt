/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables


import com.perfscope.model.DefaultSchema
import com.perfscope.model.tables.records.SamplesViewRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SamplesView(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SamplesViewRecord>?,
    parentPath: InverseForeignKey<out Record, SamplesViewRecord>?,
    aliased: Table<SamplesViewRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<SamplesViewRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    CREATE VIEW samples_view AS SELECT id,time,cpu,(SELECT pid FROM threads WHERE id = thread_id) AS pid,(SELECT tid FROM threads WHERE id = thread_id) AS tid,(SELECT comm FROM comms WHERE id = comm_id) AS command,(SELECT name FROM selected_events WHERE id = evsel_id) AS event,printf("%x", ip) AS ip_hex,(SELECT name FROM symbols WHERE id = symbol_id) AS symbol,sym_offset,(SELECT short_name FROM dsos WHERE id = dso_id) AS dso_short_name,printf("%x", to_ip) AS to_ip_hex,(SELECT name FROM symbols WHERE id = to_symbol_id) AS to_symbol,to_sym_offset,(SELECT short_name FROM dsos WHERE id = to_dso_id) AS to_dso_short_name,(SELECT name FROM branch_types WHERE id = branch_type) AS branch_type_name,in_tx,insn_count,cyc_count,CASE WHEN cyc_count=0 THEN CAST(0 AS FLOAT) ELSE ROUND(CAST(insn_count AS FLOAT) / cyc_count, 2) END AS IPC,flags FROM samples
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>samples_view</code>
         */
        val SAMPLES_VIEW: SamplesView = SamplesView()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SamplesViewRecord> = SamplesViewRecord::class.java

    /**
     * The column <code>samples_view.id</code>.
     */
    val ID: TableField<SamplesViewRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>samples_view.time</code>.
     */
    val TIME: TableField<SamplesViewRecord, Long?> = createField(DSL.name("time"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>samples_view.cpu</code>.
     */
    val CPU: TableField<SamplesViewRecord, Int?> = createField(DSL.name("cpu"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>samples_view.pid</code>.
     */
    val PID: TableField<SamplesViewRecord, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>samples_view.tid</code>.
     */
    val TID: TableField<SamplesViewRecord, Int?> = createField(DSL.name("tid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>samples_view.command</code>.
     */
    val COMMAND: TableField<SamplesViewRecord, String?> = createField(DSL.name("command"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>samples_view.event</code>.
     */
    val EVENT: TableField<SamplesViewRecord, String?> = createField(DSL.name("event"), SQLDataType.VARCHAR(80), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val IP_HEX: TableField<SamplesViewRecord, Any?> = createField(DSL.name("ip_hex"), org.jooq.impl.SQLDataType.OTHER, this, "")

    /**
     * The column <code>samples_view.symbol</code>.
     */
    val SYMBOL: TableField<SamplesViewRecord, String?> = createField(DSL.name("symbol"), SQLDataType.VARCHAR(2048), this, "")

    /**
     * The column <code>samples_view.sym_offset</code>.
     */
    val SYM_OFFSET: TableField<SamplesViewRecord, Long?> = createField(DSL.name("sym_offset"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>samples_view.dso_short_name</code>.
     */
    val DSO_SHORT_NAME: TableField<SamplesViewRecord, String?> = createField(DSL.name("dso_short_name"), SQLDataType.VARCHAR(256), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val TO_IP_HEX: TableField<SamplesViewRecord, Any?> = createField(DSL.name("to_ip_hex"), org.jooq.impl.SQLDataType.OTHER, this, "")

    /**
     * The column <code>samples_view.to_symbol</code>.
     */
    val TO_SYMBOL: TableField<SamplesViewRecord, String?> = createField(DSL.name("to_symbol"), SQLDataType.VARCHAR(2048), this, "")

    /**
     * The column <code>samples_view.to_sym_offset</code>.
     */
    val TO_SYM_OFFSET: TableField<SamplesViewRecord, Long?> = createField(DSL.name("to_sym_offset"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>samples_view.to_dso_short_name</code>.
     */
    val TO_DSO_SHORT_NAME: TableField<SamplesViewRecord, String?> = createField(DSL.name("to_dso_short_name"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>samples_view.branch_type_name</code>.
     */
    val BRANCH_TYPE_NAME: TableField<SamplesViewRecord, String?> = createField(DSL.name("branch_type_name"), SQLDataType.VARCHAR(80), this, "")

    /**
     * The column <code>samples_view.in_tx</code>.
     */
    val IN_TX: TableField<SamplesViewRecord, Boolean?> = createField(DSL.name("in_tx"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>samples_view.insn_count</code>.
     */
    val INSN_COUNT: TableField<SamplesViewRecord, Long?> = createField(DSL.name("insn_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>samples_view.cyc_count</code>.
     */
    val CYC_COUNT: TableField<SamplesViewRecord, Long?> = createField(DSL.name("cyc_count"), SQLDataType.BIGINT, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val IPC: TableField<SamplesViewRecord, Any?> = createField(DSL.name("IPC"), org.jooq.impl.SQLDataType.OTHER, this, "")

    /**
     * The column <code>samples_view.flags</code>.
     */
    val FLAGS: TableField<SamplesViewRecord, Int?> = createField(DSL.name("flags"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<SamplesViewRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<SamplesViewRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<SamplesViewRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>samples_view</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>samples_view</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>samples_view</code> table reference
     */
    constructor(): this(DSL.name("samples_view"), null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun `as`(alias: String): SamplesView = SamplesView(DSL.name(alias), this)
    override fun `as`(alias: Name): SamplesView = SamplesView(alias, this)
    override fun `as`(alias: Table<*>): SamplesView = SamplesView(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SamplesView = SamplesView(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SamplesView = SamplesView(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): SamplesView = SamplesView(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): SamplesView = SamplesView(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): SamplesView = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): SamplesView = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): SamplesView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): SamplesView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): SamplesView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): SamplesView = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): SamplesView = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): SamplesView = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): SamplesView = where(DSL.notExists(select))
}

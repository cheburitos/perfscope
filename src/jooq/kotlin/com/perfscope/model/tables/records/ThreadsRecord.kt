/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables.records


import com.perfscope.model.tables.Threads

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ThreadsRecord() : UpdatableRecordImpl<ThreadsRecord>(Threads.THREADS) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var machineId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var processId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var pid: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var tid: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised ThreadsRecord
     */
    constructor(id: Int? = null, machineId: Long? = null, processId: Long? = null, pid: Int? = null, tid: Int? = null): this() {
        this.id = id
        this.machineId = machineId
        this.processId = processId
        this.pid = pid
        this.tid = tid
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised ThreadsRecord
     */
    constructor(value: com.perfscope.model.tables.pojos.Threads?): this() {
        if (value != null) {
            this.id = value.id
            this.machineId = value.machineId
            this.processId = value.processId
            this.pid = value.pid
            this.tid = value.tid
            resetChangedOnNotNull()
        }
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables


import com.perfscope.model.DefaultSchema
import com.perfscope.model.tables.records.ContextSwitchesViewRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ContextSwitchesView(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ContextSwitchesViewRecord>?,
    parentPath: InverseForeignKey<out Record, ContextSwitchesViewRecord>?,
    aliased: Table<ContextSwitchesViewRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ContextSwitchesViewRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("CREATE VIEW context_switches_view AS SELECT context_switches.id,context_switches.machine_id,context_switches.time,context_switches.cpu,th_out.pid AS pid_out,th_out.tid AS tid_out,comm_out.comm AS comm_out,th_in.pid AS pid_in,th_in.tid AS tid_in,comm_in.comm AS comm_in,CASE	  WHEN context_switches.flags = 0 THEN 'in' WHEN context_switches.flags = 1 THEN 'out' WHEN context_switches.flags = 3 THEN 'out preempt' ELSE context_switches.flags END AS flags FROM context_switches INNER JOIN threads AS th_out ON th_out.id   = context_switches.thread_out_id INNER JOIN threads AS th_in  ON th_in.id    = context_switches.thread_in_id INNER JOIN comms AS comm_out ON comm_out.id = context_switches.comm_out_id INNER JOIN comms AS comm_in  ON comm_in.id  = context_switches.comm_in_id"),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>context_switches_view</code>
         */
        val CONTEXT_SWITCHES_VIEW: ContextSwitchesView = ContextSwitchesView()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ContextSwitchesViewRecord> = ContextSwitchesViewRecord::class.java

    /**
     * The column <code>context_switches_view.id</code>.
     */
    val ID: TableField<ContextSwitchesViewRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>context_switches_view.machine_id</code>.
     */
    val MACHINE_ID: TableField<ContextSwitchesViewRecord, Long?> = createField(DSL.name("machine_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>context_switches_view.time</code>.
     */
    val TIME: TableField<ContextSwitchesViewRecord, Long?> = createField(DSL.name("time"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>context_switches_view.cpu</code>.
     */
    val CPU: TableField<ContextSwitchesViewRecord, Int?> = createField(DSL.name("cpu"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>context_switches_view.pid_out</code>.
     */
    val PID_OUT: TableField<ContextSwitchesViewRecord, Int?> = createField(DSL.name("pid_out"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>context_switches_view.tid_out</code>.
     */
    val TID_OUT: TableField<ContextSwitchesViewRecord, Int?> = createField(DSL.name("tid_out"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>context_switches_view.comm_out</code>.
     */
    val COMM_OUT: TableField<ContextSwitchesViewRecord, String?> = createField(DSL.name("comm_out"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>context_switches_view.pid_in</code>.
     */
    val PID_IN: TableField<ContextSwitchesViewRecord, Int?> = createField(DSL.name("pid_in"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>context_switches_view.tid_in</code>.
     */
    val TID_IN: TableField<ContextSwitchesViewRecord, Int?> = createField(DSL.name("tid_in"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>context_switches_view.comm_in</code>.
     */
    val COMM_IN: TableField<ContextSwitchesViewRecord, String?> = createField(DSL.name("comm_in"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>context_switches_view.flags</code>.
     */
    val FLAGS: TableField<ContextSwitchesViewRecord, String?> = createField(DSL.name("flags"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<ContextSwitchesViewRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ContextSwitchesViewRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ContextSwitchesViewRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>context_switches_view</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>context_switches_view</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>context_switches_view</code> table reference
     */
    constructor(): this(DSL.name("context_switches_view"), null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun `as`(alias: String): ContextSwitchesView = ContextSwitchesView(DSL.name(alias), this)
    override fun `as`(alias: Name): ContextSwitchesView = ContextSwitchesView(alias, this)
    override fun `as`(alias: Table<*>): ContextSwitchesView = ContextSwitchesView(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ContextSwitchesView = ContextSwitchesView(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ContextSwitchesView = ContextSwitchesView(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ContextSwitchesView = ContextSwitchesView(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): ContextSwitchesView = ContextSwitchesView(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ContextSwitchesView = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): ContextSwitchesView = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): ContextSwitchesView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ContextSwitchesView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ContextSwitchesView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ContextSwitchesView = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ContextSwitchesView = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ContextSwitchesView = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ContextSwitchesView = where(DSL.notExists(select))
}

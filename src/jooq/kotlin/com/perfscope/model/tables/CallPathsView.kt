/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables


import com.perfscope.model.DefaultSchema
import com.perfscope.model.tables.records.CallPathsViewRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CallPathsView(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, CallPathsViewRecord>?,
    parentPath: InverseForeignKey<out Record, CallPathsViewRecord>?,
    aliased: Table<CallPathsViewRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<CallPathsViewRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    CREATE VIEW call_paths_view AS SELECT c.id,printf("%x", c.ip) AS ip,c.symbol_id,(SELECT name FROM symbols WHERE id = c.symbol_id) AS symbol,(SELECT dso_id FROM symbols WHERE id = c.symbol_id) AS dso_id,(SELECT dso FROM symbols_view  WHERE id = c.symbol_id) AS dso_short_name,c.parent_id,printf("%x", p.ip) AS parent_ip,p.symbol_id AS parent_symbol_id,(SELECT name FROM symbols WHERE id = p.symbol_id) AS parent_symbol,(SELECT dso_id FROM symbols WHERE id = p.symbol_id) AS parent_dso_id,(SELECT dso FROM symbols_view  WHERE id = p.symbol_id) AS parent_dso_short_name FROM call_paths c INNER JOIN call_paths p ON p.id = c.parent_id
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>call_paths_view</code>
         */
        val CALL_PATHS_VIEW: CallPathsView = CallPathsView()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CallPathsViewRecord> = CallPathsViewRecord::class.java

    /**
     * The column <code>call_paths_view.id</code>.
     */
    val ID: TableField<CallPathsViewRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val IP: TableField<CallPathsViewRecord, Any?> = createField(DSL.name("ip"), org.jooq.impl.SQLDataType.OTHER, this, "")

    /**
     * The column <code>call_paths_view.symbol_id</code>.
     */
    val SYMBOL_ID: TableField<CallPathsViewRecord, Long?> = createField(DSL.name("symbol_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>call_paths_view.symbol</code>.
     */
    val SYMBOL: TableField<CallPathsViewRecord, String?> = createField(DSL.name("symbol"), SQLDataType.VARCHAR(2048), this, "")

    /**
     * The column <code>call_paths_view.dso_id</code>.
     */
    val DSO_ID: TableField<CallPathsViewRecord, Long?> = createField(DSL.name("dso_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>call_paths_view.dso_short_name</code>.
     */
    val DSO_SHORT_NAME: TableField<CallPathsViewRecord, String?> = createField(DSL.name("dso_short_name"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>call_paths_view.parent_id</code>.
     */
    val PARENT_ID: TableField<CallPathsViewRecord, Long?> = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val PARENT_IP: TableField<CallPathsViewRecord, Any?> = createField(DSL.name("parent_ip"), org.jooq.impl.SQLDataType.OTHER, this, "")

    /**
     * The column <code>call_paths_view.parent_symbol_id</code>.
     */
    val PARENT_SYMBOL_ID: TableField<CallPathsViewRecord, Long?> = createField(DSL.name("parent_symbol_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>call_paths_view.parent_symbol</code>.
     */
    val PARENT_SYMBOL: TableField<CallPathsViewRecord, String?> = createField(DSL.name("parent_symbol"), SQLDataType.VARCHAR(2048), this, "")

    /**
     * The column <code>call_paths_view.parent_dso_id</code>.
     */
    val PARENT_DSO_ID: TableField<CallPathsViewRecord, Long?> = createField(DSL.name("parent_dso_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>call_paths_view.parent_dso_short_name</code>.
     */
    val PARENT_DSO_SHORT_NAME: TableField<CallPathsViewRecord, String?> = createField(DSL.name("parent_dso_short_name"), SQLDataType.VARCHAR(256), this, "")

    private constructor(alias: Name, aliased: Table<CallPathsViewRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<CallPathsViewRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<CallPathsViewRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>call_paths_view</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>call_paths_view</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>call_paths_view</code> table reference
     */
    constructor(): this(DSL.name("call_paths_view"), null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun `as`(alias: String): CallPathsView = CallPathsView(DSL.name(alias), this)
    override fun `as`(alias: Name): CallPathsView = CallPathsView(alias, this)
    override fun `as`(alias: Table<*>): CallPathsView = CallPathsView(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CallPathsView = CallPathsView(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CallPathsView = CallPathsView(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): CallPathsView = CallPathsView(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): CallPathsView = CallPathsView(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): CallPathsView = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): CallPathsView = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): CallPathsView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): CallPathsView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): CallPathsView = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): CallPathsView = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): CallPathsView = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): CallPathsView = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): CallPathsView = where(DSL.notExists(select))
}
